version: 2.1
jobs:
  preflight:
    working_directory: ~/ci
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - run:
          name: Update npm
          command: 'sudo npm install -g npm@latest'
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "package-lock.json" }}
            - dependency-cache-
      - run:
          name: Install npm dependencies
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
  lint:
    working_directory: ~/ci
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "package-lock.json" }}
            - dependency-cache-
      - run:
          name: Running ESLint
          command: |
            mkdir -p ~/reports
            npx eslint ./src/ --format unix --output-file ~/reports/eslint.log
          when: always
      - store_test_results:
          path: ~/reports
      - store_artifacts:
          path: ~/reports
  deploy:
    working_directory: ~/ci
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "package-lock.json" }}
            - dependency-cache-
      - add_ssh_keys:
          fingerprints:
            - $DEPLOY_KEY_FINGERPRINT
      - run:
          name: Building source in `production` mode
          command: npm run build:production
      - run:
          name: Make `CNAME`
          command: printf 'rrhouse.ee' > ./dist/CNAME
      - run:
          name: Deploy build output to https://xbanki.me/
          command: |
            git config --global user.name "Circle CI"
            git config --global user.email "bot@circleci.com"
            npm run deploy
workflows:
  deploy-gh-pages:
    jobs:
      - preflight:
          filters:
            branches:
              only: master
      - lint:
          requires:
            - preflight
      - deploy:
          requires:
            - lint
